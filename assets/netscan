#!/usr/bin/env python3
# -*- coding: utf-8 -*-
### BEGIN INIT INFO
# Provides:          advanced_network_scanner
# Required-Start:    $network $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Advanced Network Scanner with Vulnerability Assessment
# Description:       Comprehensive scanning with CVE detection and vulnerability testing
# Author:            LIONMAD <https://github.com/Midohajhouj>
# License:           MIT License
### END INIT INFO ###

import sys
import os
import socket
import argparse
import json
import logging
import subprocess
import asyncio
import re
import xml.etree.ElementTree as ET
from concurrent.futures import ThreadPoolExecutor
from typing import Dict, List, Optional, Tuple
from datetime import datetime
from collections import defaultdict
from prettytable import PrettyTable, ALL
import requests
import dns.resolver
from colorama import init, Fore, Style
import ssl
import whois
from bs4 import BeautifulSoup

# Initialize colorama
init(autoreset=True)

# Colors
G = Fore.GREEN
R = Fore.RED
Y = Fore.YELLOW
B = Fore.BLUE
M = Fore.MAGENTA
C = Fore.CYAN
W = Fore.WHITE
RESET = Style.RESET_ALL

# Constants
LOG_DIR = "/var/log/network_scanner"
CVE_DB_FILE = "cve-db.json"

# Setup logging
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(os.path.join(LOG_DIR, "scanner.log")),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Extended CVE Database with more vulnerabilities (no authentication tests)
CVE_DATABASE = {
    "DNS": {
        "CVE-2020-1350": {
            "score": 10.0,
            "description": "Windows DNS Server RCE Vulnerability",
            "test": "dig +short @target TXT cve-2020-1350.test",
            "safe": True
        },
        "CVE-2017-14491": {
            "score": 9.8,
            "description": "Dnsmasq multiple vulnerabilities",
            "test": "dig +short @target version.bind CHAOS TXT",
            "safe": True
        },
        "CVE-2019-6470": {
            "score": 8.1,
            "description": "BIND 9 DoS vulnerability",
            "test": "dig +short @target version.bind CHAOS TXT",
            "safe": True
        }
    },
    "HTTP": {
        "CVE-2021-41773": {
            "score": 9.8,
            "description": "Apache HTTP Server Path Traversal",
            "test": "curl -v --max-time 5 http://target/cgi-bin/.%2e/%2e%2e/%2e%2e/etc/passwd",
            "safe": True
        },
        "CVE-2017-5638": {
            "score": 10.0,
            "description": "Apache Struts Remote Code Execution",
            "test": "curl -X POST http://target/ -H 'Content-Type: %{(#_='multipart/form-data')}",
            "safe": True
        },
        "CVE-2018-7600": {
            "score": 9.8,
            "description": "Drupal Remote Code Execution",
            "test": "curl -v 'http://target/user/register?element_parents=account/mail/%23value'",
            "safe": True
        }
    },
    "SSH": {
        "CVE-2018-15473": {
            "score": 5.3,
            "description": "OpenSSH User Enumeration",
            "test": "nc -w 3 target 22 < /dev/null",
            "safe": True
        }
    },
    "FTP": {
        "CVE-2015-3306": {
            "score": 7.5,
            "description": "ProFTPD Mod_Copy Command Execution",
            "test": "echo 'QUIT' | nc -w 3 target 21",
            "safe": True
        }
    },
    "SSL/TLS": {
        "CVE-2014-0160": {
            "score": 7.5,
            "description": "Heartbleed Vulnerability",
            "test": "openssl s_client -connect target:443 -tlsextdebug 2>&1 | grep heartbeat",
            "safe": True
        },
        "CVE-2016-2183": {
            "score": 5.9,
            "description": "SWEET32 Birthday Attack",
            "test": "nmap -p 443 --script ssl-enum-ciphers target",
            "safe": True
        }
    },
    "SMB": {
        "CVE-2017-0143": {
            "score": 9.3,
            "description": "EternalBlue SMB Remote Code Execution",
            "test": "nmap --script smb-vuln-ms17-010 target -p 445",
            "safe": True
        }
    },
    "RDP": {
        "CVE-2019-0708": {
            "score": 9.8,
            "description": "BlueKeep RDP Remote Code Execution",
            "test": "nmap -p 3389 --script rdp-vuln-ms12-020 target",
            "safe": True
        }
    }
}

# Service Database with more ports (no authentication tests)
SERVICE_DB = {
    21: {
        "service": "FTP", "protocol": "TCP", "risk": "High",
        "cves": ["CVE-2015-3306"],
        "tests": {
            "banner": "echo 'QUIT' | nc -w 3 target 21"
        }
    },
    22: {
        "service": "SSH", "protocol": "TCP", "risk": "High",
        "cves": ["CVE-2018-15473"],
        "tests": {
            "banner": "nc -w 3 target 22 < /dev/null"
        }
    },
    53: {
        "service": "DNS", "protocol": "UDP", "risk": "Critical",
        "cves": ["CVE-2020-1350", "CVE-2017-14491", "CVE-2019-6470"],
        "tests": {
            "query": "dig +short +time=2 +tries=1 @target version.bind CHAOS TXT"
        }
    },
    80: {
        "service": "HTTP", "protocol": "TCP", "risk": "High",
        "cves": ["CVE-2021-41773", "CVE-2017-5638", "CVE-2018-7600"],
        "tests": {
            "headers": "curl -I --max-time 3 http://target",
            "dir_traversal": "curl -v --path-as-is 'http://target/../../etc/passwd'"
        }
    },
    443: {
        "service": "HTTPS", "protocol": "TCP", "risk": "High",
        "cves": ["CVE-2014-0160", "CVE-2016-2183"],
        "tests": {
            "headers": "curl -Ik --max-time 3 https://target",
            "ssl_cert": "openssl s_client -connect target:443 -showcerts < /dev/null"
        }
    },
    445: {
        "service": "SMB", "protocol": "TCP", "risk": "Critical",
        "cves": ["CVE-2017-0143"],
        "tests": {
            "smb_version": "smbclient -N -L //target"
        }
    },
    3389: {
        "service": "RDP", "protocol": "TCP", "risk": "High",
        "cves": ["CVE-2019-0708"],
        "tests": {
            "banner": "nc -w 3 target 3389 < /dev/null"
        }
    }
}

# ================== SCANNING FUNCTIONS ==================

def resolve_target(target: str) -> Optional[str]:
    """Resolve domain to IP address safely."""
    try:
        if re.match(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$", target):
            return target
        return socket.gethostbyname(target)
    except (socket.gaierror, socket.timeout) as e:
        logger.error(f"Could not resolve {target}: {str(e)}")
        return None

def port_scan(target: str, port: int) -> Tuple[int, str, bool, str]:
    """Scan a single port safely with timeout."""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(2)
            result = s.connect_ex((target, port)) == 0
            banner = ""
            if result:
                try:
                    s.send(b"GET / HTTP/1.0\r\n\r\n")
                    banner = s.recv(1024).decode('utf-8', 'ignore').strip()
                except:
                    pass
            return (port, SERVICE_DB.get(port, {}).get("service", "Unknown"), result, banner)
    except Exception as e:
        logger.error(f"Error scanning port {port}: {str(e)}")
        return (port, "Unknown", False, "")

async def full_scan(target: str) -> List[Dict]:
    """Perform comprehensive scan of all known ports."""
    results = []
    with ThreadPoolExecutor(max_workers=50) as executor:
        futures = [executor.submit(port_scan, target, port) for port in SERVICE_DB.keys()]
        for future in futures:
            port, service, is_open, banner = future.result()
            results.append({
                "port": port,
                "service": service,
                "status": "Open" if is_open else "Closed",
                "protocol": SERVICE_DB.get(port, {}).get("protocol", "TCP"),
                "risk": SERVICE_DB.get(port, {}).get("risk", "Unknown"),
                "banner": banner[:200] if banner else ""
            })
    return results

def test_cve(target: str, port: int, cve: str) -> Dict:
    """Test for specific CVE vulnerability safely."""
    service = SERVICE_DB.get(port, {}).get("service", "")
    cve_info = CVE_DATABASE.get(service, {}).get(cve, {})
    
    if not cve_info:
        return {"cve": cve, "status": "Not tested", "result": "No test available"}
    
    test_cmd = cve_info.get("test", "").replace("target", target)
    if not test_cmd:
        return {"cve": cve, "status": "Not tested", "result": "No test available"}
    
    try:
        result = subprocess.run(
            test_cmd,
            shell=True,
            capture_output=True,
            text=True,
            timeout=5
        )
        
        vulnerable = "VULNERABLE" in result.stdout.upper()
        output = result.stdout[:200] + ("..." if len(result.stdout) > 200 else "")
        
        return {
            "cve": cve,
            "status": "Vulnerable" if vulnerable else "Not vulnerable",
            "result": output,
            "score": cve_info.get("score", 0.0),
            "description": cve_info.get("description", "")
        }
    except subprocess.TimeoutExpired:
        return {"cve": cve, "status": "Timeout", "result": "Test timed out"}
    except Exception as e:
        return {"cve": cve, "status": "Test failed", "result": str(e)}

def run_vulnerability_tests(target: str, open_ports: List[Dict]) -> List[Dict]:
    """Run vulnerability tests for all open ports safely."""
    results = []
    for port_info in open_ports:
        port = port_info["port"]
        
        # Test all CVEs for this service
        for cve in SERVICE_DB.get(port, {}).get("cves", []):
            results.append(test_cve(target, port, cve))
            
        # Run standard service tests
        for test_name, test_cmd in SERVICE_DB.get(port, {}).get("tests", {}).items():
            try:
                test_cmd = test_cmd.replace("target", target)
                result = subprocess.run(
                    test_cmd,
                    shell=True,
                    capture_output=True,
                    text=True,
                    timeout=5
                )
                output = result.stdout[:200] + ("..." if len(result.stdout) > 200 else "")
                results.append({
                    "test": test_name,
                    "port": port,
                    "result": output,
                    "status": "Tested"
                })
            except subprocess.TimeoutExpired:
                results.append({
                    "test": test_name,
                    "port": port,
                    "result": "Test timed out",
                    "status": "Timeout"
                })
            except Exception as e:
                results.append({
                    "test": test_name,
                    "port": port,
                    "result": f"Test failed: {str(e)}",
                    "status": "Failed"
                })
    
    return results

# ================== REPORTING FUNCTIONS ==================

def generate_scan_table(scan_results: List[Dict]) -> PrettyTable:
    """Generate formatted scan results table."""
    table = PrettyTable()
    table.field_names = ["Port", "Service", "Status", "Protocol", "Risk", "Banner"]
    table.align = "l"
    table.hrules = ALL
    
    for result in scan_results:
        status = f"{G}{result['status']}{RESET}" if result["status"] == "Closed" else f"{R}{result['status']}{RESET}"
        risk = ""
        if result["risk"] == "Critical":
            risk = f"{R}{result['risk']}{RESET}"
        elif result["risk"] == "High":
            risk = f"{Y}{result['risk']}{RESET}"
        else:
            risk = result["risk"]
        
        table.add_row([
            result["port"],
            result["service"],
            status,
            result["protocol"],
            risk,
            result.get("banner", "")[:50] + ("..." if len(result.get("banner", "")) > 50 else "")
        ])
    
    return table

def generate_vuln_table(vuln_results: List[Dict]) -> PrettyTable:
    """Generate formatted vulnerability results table."""
    table = PrettyTable()
    table.field_names = ["Test/CVE", "Port", "Score", "Status", "Result"]
    table.align = "l"
    table.max_width = 50
    table.hrules = ALL
    
    for result in vuln_results:
        status = ""
        if "status" in result:
            if "Vulnerable" in result["status"]:
                status = f"{R}{result['status']}{RESET}"
            elif "Failed" in result["status"] or "Timeout" in result["status"]:
                status = f"{Y}{result['status']}{RESET}"
            else:
                status = f"{G}{result['status']}{RESET}"
        else:
            status = "Tested"
        
        test_name = result.get("cve", result.get("test", "Unknown"))
        score = result.get("score", "N/A")
        if isinstance(score, float):
            if score >= 9.0:
                score = f"{R}{score}{RESET}"
            elif score >= 7.0:
                score = f"{Y}{score}{RESET}"
            else:
                score = f"{G}{score}{RESET}"
        
        table.add_row([
            test_name,
            result.get("port", ""),
            score,
            status,
            result["result"][:100] + ("..." if len(result["result"]) > 100 else "")
        ])
    
    return table

def generate_html_report(scan_results: List[Dict], vuln_results: List[Dict], target: str) -> str:
    """Generate comprehensive HTML report."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    open_ports = [r for r in scan_results if r["status"] == "Open"]
    critical_vulns = [r for r in vuln_results if "status" in r and "Vulnerable" in r["status"] and r.get("score", 0) >= 9.0]
    
    html = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Security Scan Report - {target}</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            h1, h2, h3 {{ color: #2c3e50; }}
            table {{ border-collapse: collapse; width: 100%; margin-bottom: 20px; }}
            th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
            th {{ background-color: #f2f2f2; }}
            .critical {{ background-color: #ffdddd; }}
            .high {{ background-color: #fff3cd; }}
            .vulnerable {{ background-color: #ffdddd; }}
            .open {{ color: #d9534f; font-weight: bold; }}
            .closed {{ color: #5cb85c; }}
            pre {{ white-space: pre-wrap; word-wrap: break-word; }}
        </style>
    </head>
    <body>
        <h1>Security Scan Report</h1>
        <p>Target: {target}</p>
        <p>Scan date: {timestamp}</p>
        
        <h2>Scan Summary</h2>
        <p>Total ports scanned: {len(scan_results)}</p>
        <p>Open ports: {len(open_ports)}</p>
        <p>Critical vulnerabilities found: {len(critical_vulns)}</p>
        
        <h2>Port Scan Results</h2>
        <table>
            <tr>
                <th>Port</th>
                <th>Service</th>
                <th>Status</th>
                <th>Protocol</th>
                <th>Risk Level</th>
                <th>Banner</th>
            </tr>
    """
    
    for result in scan_results:
        risk_class = ""
        if result["risk"] == "Critical":
            risk_class = "critical"
        elif result["risk"] == "High":
            risk_class = "high"
        
        status_class = "open" if result["status"] == "Open" else "closed"
        
        html += f"""
            <tr class="{risk_class}">
                <td>{result['port']}</td>
                <td>{result['service']}</td>
                <td class="{status_class}">{result['status']}</td>
                <td>{result['protocol']}</td>
                <td>{result['risk']}</td>
                <td><pre>{result.get('banner', '')}</pre></td>
            </tr>
        """
    
    html += """
        </table>
    """
    
    if vuln_results:
        html += """
        <h2>Vulnerability Test Results</h2>
        <table>
            <tr>
                <th>Test/CVE</th>
                <th>Port</th>
                <th>CVSS Score</th>
                <th>Status</th>
                <th>Result</th>
            </tr>
        """
        
        for result in vuln_results:
            status_class = "vulnerable" if "status" in result and "Vulnerable" in result["status"] else ""
            test_name = result.get("cve", result.get("test", "Unknown"))
            
            html += f"""
            <tr class="{status_class}">
                <td>{test_name}</td>
                <td>{result.get('port', '')}</td>
                <td>{result.get('score', 'N/A')}</td>
                <td>{result.get('status', 'Tested')}</td>
                <td><pre>{result['result']}</pre></td>
            </tr>
            """
        
        html += """
        </table>
        """
    
    html += """
    </body>
    </html>
    """
    
    return html

# ================== MAIN FUNCTIONS ==================

def interactive_scan():
    """Run interactive scanning mode."""
    print(f"\n{C}=== Advanced Network Scanner ==={RESET}")
    target = input(f"{B}Enter target IP/hostname:{RESET} ")
    
    ip = resolve_target(target)
    if not ip:
        print(f"{R}Invalid target or unable to resolve{RESET}")
        return
    
    print(f"\n{Y}[*] Scanning {ip}...{RESET}")
    
    # Phase 1: Port scanning
    try:
        scan_results = asyncio.run(full_scan(ip))
    except Exception as e:
        print(f"{R}Error during scan: {str(e)}{RESET}")
        return
    
    print(f"\n{B}=== SCAN RESULTS ==={RESET}")
    print(generate_scan_table(scan_results))
    
    # Phase 2: Vulnerability testing
    open_ports = [r for r in scan_results if r["status"] == "Open"]
    if open_ports:
        print(f"\n{Y}[*] Running vulnerability tests...{RESET}")
        try:
            vuln_results = run_vulnerability_tests(ip, open_ports)
            print(f"\n{B}=== VULNERABILITY RESULTS ==={RESET}")
            print(generate_vuln_table(vuln_results))
        except Exception as e:
            print(f"{R}Error during vulnerability tests: {str(e)}{RESET}")
            vuln_results = []
    else:
        print(f"\n{G}No open ports found{RESET}")
        vuln_results = []
    
    # Save report
    if input(f"\n{B}Save full report? (y/n):{RESET} ").lower() == "y":
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = os.path.join(LOG_DIR, f"scan_report_{ip}_{timestamp}.html")
        
        try:
            html_report = generate_html_report(scan_results, vuln_results, ip)
            with open(report_file, "w") as f:
                f.write(html_report)
            print(f"\n{G}Report saved to: {report_file}{RESET}")
        except Exception as e:
            print(f"{R}Error saving report: {str(e)}{RESET}")

def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="Advanced Network Scanner")
    parser.add_argument("-t", "--target", help="Target IP/hostname to scan")
    parser.add_argument("-i", "--interactive", action="store_true", help="Run in interactive mode")
    parser.add_argument("-o", "--output", help="Output file for report (HTML format)")
    args = parser.parse_args()

    try:
        if args.interactive:
            interactive_scan()
        elif args.target:
            ip = resolve_target(args.target)
            if not ip:
                print(f"{R}Invalid target or unable to resolve{RESET}")
                return
            
            print(f"{Y}[*] Scanning {ip}...{RESET}")
            scan_results = asyncio.run(full_scan(ip))
            print(generate_scan_table(scan_results))
            
            open_ports = [r for r in scan_results if r["status"] == "Open"]
            if open_ports:
                vuln_results = run_vulnerability_tests(ip, open_ports)
                print(generate_vuln_table(vuln_results))
            
            if args.output:
                try:
                    html_report = generate_html_report(scan_results, vuln_results if open_ports else [], ip)
                    with open(args.output, "w") as f:
                        f.write(html_report)
                    print(f"\n{G}Report saved to: {args.output}{RESET}")
                except Exception as e:
                    print(f"{R}Error saving report: {str(e)}{RESET}")
        else:
            parser.print_help()
    except KeyboardInterrupt:
        print(f"\n{R}Scan interrupted by user{RESET}")
    except Exception as e:
        print(f"\n{R}Error during scan: {str(e)}{RESET}")

if __name__ == "__main__":
    main()
